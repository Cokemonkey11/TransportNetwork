package HealthBar

import LinkedList
import TimerUtils
import Textures

constant FULL_RED       = 0
constant FULL_GREEN     = 255
constant FULL_BLUE      = 0

constant HALF_RED       = 255
constant HALF_GREEN     = 255
constant HALF_BLUE      = 0

constant EMPTY_RED      = 255
constant EMPTY_GREEN    = 0
constant EMPTY_BLUE     = 0

constant HIGH_PEAK_RED  = FULL_RED - HALF_RED
constant HIGH_PEAK_GREEN = FULL_GREEN - HALF_GREEN
constant HIGH_PEAK_BLUE = FULL_BLUE - HALF_BLUE

constant LOW_PEAK_RED   = HALF_RED - EMPTY_RED
constant LOW_PEAK_GREEN = HALF_GREEN - EMPTY_GREEN
constant LOW_PEAK_BLUE  = HALF_BLUE - EMPTY_BLUE

constant COLOUR_HEALTH_FULL = color(FULL_RED, FULL_GREEN, FULL_BLUE)
constant COLOUR_HEALTH_EMPTY = color(EMPTY_RED, EMPTY_GREEN, EMPTY_BLUE)

constant INTERVAL = .08

public class HealthBar

    private static timer clock
    private static let barList = new LinkedList<thistype>

    framehandle hpBar
    unit source
    bool isListed // prevents from having to search through a list all the time
    player owner

    construct(framehandle parentFrame, unit u, player play, real height, real width)
        hpBar = createSimpleFrame("MySimpleBar", parentFrame, 0)
        ..setTexture(Textures.human_statbar_color3, 0, false)
        ..setSize(width, height)
        ..setPoint(FRAMEPOINT_TOPLEFT, parentFrame, FRAMEPOINT_BOTTOMLEFT)
        ..hide()
        source = u
        owner = play
        isListed = false

    ondestroy
        unlist()
        hpBar.remove()
        source = null

    function update()
        let percentage = source.getHP() / source.getMaxHP()
        int red
        int blue
        int green
        if percentage > .5
            let newPer = (percentage-.5)/.5
            red = ((HIGH_PEAK_RED * newPer) + HALF_RED).toInt()
            green = ((HIGH_PEAK_GREEN * newPer) + HALF_GREEN).toInt()
            blue = ((HIGH_PEAK_BLUE * newPer) + HALF_BLUE).toInt()
        else
            let newPer = percentage/.5
            red = ((LOW_PEAK_RED * newPer) + EMPTY_RED).toInt()
            green = ((LOW_PEAK_GREEN * newPer) + EMPTY_GREEN).toInt()
            blue = ((LOW_PEAK_BLUE * newPer) + EMPTY_BLUE).toInt()
        let barCol = color(red, green, blue)
        hpBar.setVertexColor(BlzConvertColor(255, barCol.red, barCol.green, barCol.blue))
        hpBar.setValue(percentage * 100.)

    function unlist()
        if isListed
            barList.remove(this)
            isListed = false
            hpBar.hide()
            if barList.isEmpty()
                clock.release()

    function list()
        if not isListed
            barList.push(this)
            isListed = true
            hpBar.show(owner)
            update()
            if barList.size() == 1
                clock = getTimer()
                clock.startPeriodic(INTERVAL, function callback)

    static function callback()
        for bar in barList
            bar.update()